sequence:
  - alias: Repeat for all select Mobile Devices
    repeat:
      sequence:
        - variables:
            watch_notification_data: |-
              {% set notification = namespace(data={}) %}  
              {% set additional = namespace(data={}) %}  

              {% if title %}
                {% set notification.data = dict(notification.data, **{ 'title': title }) %}
              {% endif %}
              {% if message %}
                {% set notification.data = dict(notification.data, **{ 'message': message }) %}
              {% endif %}

              {% if tag %}
                {% set additional.data = dict(additional.data, **{ 'tag': tag }) %}
              {% endif %}
              {% if channel %}
                {% set additional.data = dict(additional.data, **{ 'channel': channel }) %}
              {% endif %}

              {% if notification_icon %}
                {% set additional.data = dict(additional.data, **{ 'notification_icon': notification_icon }) %}
              {% endif %}
              {% if notification_color %}
                {% set hex_color = '#%02x%02x%02x' | format(notification_color[0], notification_color[1], notification_color[2]) %}
                {% set additional.data = dict(additional.data, **{ 'color': hex_color }) %}
              {% endif %}
              {% if image_icon %}
                {% set additional.data = dict(additional.data, **{ 'icon_url': image_icon }) %}
              {% endif %}
              {% if additional.data %}
                {% set notification.data = dict(notification.data, **{ 'data': additional.data }) %}
              {% endif %}

              {{ notification.data }}
            mobile_notification_data: >-
              {% set notification = namespace(data={}) %}     
              {% set additional = namespace(data={}) %}     
              {% set push = namespace(data={}) %}     
              {% set actions = [] %}  
              {% set currentDevice = repeat.item %} {% set phoneType = device_attr(currentDevice, 'manufacturer') %} # "Apple" == iOS Otherwise, Android

              # ü§ñ ANDROID ONLY ITEMS!
              {% if phoneType != "Apple" %}
                {% if channel %}
                  {% set additional.data = dict(additional.data, **{ 'channel': channel }) %}
                {% endif %} 
                
                {% if notification_icon %}
                  {% set additional.data = dict(additional.data, **{ 'notification_icon': notification_icon }) %}
                {% endif %} 
                {% if notification_color %}
                  {% set hex_color = '#%02x%02x%02x' | format(notification_color[0], notification_color[1], notification_color[2]) %}
                  {% set additional.data = dict(additional.data, **{ 'color': hex_color }) %}
                {% endif %} 
                {% if image_icon %}
                  {% set additional.data = dict(additional.data, **{ 'icon_url': image_icon }) %}
                {% endif %} 
                {% if image %}
                  {% set additional.data = dict(additional.data, **{ 'image': image }) %}
                {% endif %}
                
                {% if enable_tts == true %}
                  {% set notification.data = dict(notification.data, **{ 'message': "TTS" }) %}
                  {% set additional.data = dict(additional.data, **{ 'tts_text': message }) %}
                  {% set additional.data = dict(additional.data, **{ 'media_stream': media_stream | default("Default") }) %}
                {% endif %}
                
                {% if sticky %}
                  {% set additional.data = dict(additional.data, **{ 'sticky': sticky }) %}
                {% endif %} 
                {% if persistent %}
                  {% set additional.data = dict(additional.data, **{ 'persistent': persistent }) %}
                {% endif %}
                
                {% if timeout %}
                  {% set additional.data = dict(additional.data, **{ 'timeout': timeout }) %}
                {% endif %}

                {% if progress %}
                  {% set additional.data = dict(additional.data, **{ 'progress': progress }) %}
                  {% set additional.data = dict(additional.data, **{ 'progress_max': progress_max | default(100) }) %}
                {% endif %} 
                {% if progress_indeterminate %}
                  {% set additional.data = dict(additional.data, **{ 'progress': 1 }) %}
                  {% set additional.data = dict(additional.data, **{ 'progress_indeterminate': progress_indeterminate }) %}
                {% endif %}

                {% if chronometer or chronometer_variable %}
                  {% set additional.data = dict(additional.data, **{ 'chronometer': 'true' }) %}
                  {% if chronometer_variable %}
                    {% set additional.data = dict(additional.data, **{ 'when': chronometer_variable | int }) %}
                  {% else %}
                    {% set additional.data = dict(additional.data, **{ 'when': chronometer }) %}
                  {% endif %}
                  {% set additional.data = dict(additional.data, **{ 'when_relative': 'false' if chronometer_relative == False else 'true' }) %}
                {% endif %}

                
                {% if android_auto_ui %}
                  {% set additional.data = dict(additional.data, **{ 'car_ui': android_auto_ui }) %}
                {% endif %}
              {% endif %} # ü§ñ END ANDROID

              # üçé Apple iOS ONLY {% if phoneType == "Apple" %}
                {% if interruption_level %} # üçé iOS Only
                  {% set push.data = dict(push.data, **{ 'interruption-level': interruption_level }) %}
                {% endif %}
                
                {% if sound %} # üçé iOS Only
                  {% set push.data = dict(push.data, **{ 'sound': sound }) %}
                {% endif %}
                
                {% if push.data %} # üçé iOS Only
                  {% set additional.data = dict(additional.data, **{ 'push': push.data }) %}
                {% endif %}
              {% endif %} # üçé END APPLE


              # üåé UNIVERSAL ITEMS! 
              {% if title %}
                {% set notification.data = dict(notification.data, **{ 'title': title }) %}
              {% endif %}  
              {% if message %}
                {% set notification.data = dict(notification.data, **{ 'message': message }) %}
              {% endif %}

              {% if tag %}
                {% set additional.data = dict(additional.data, **{ 'tag': tag }) %}
              {% endif %}  {% if group %}
                {% set additional.data = dict(additional.data, **{ 'group': group }) %}
              {% endif %}

              {% if url_when_clicked %}
                {% set additional.data = dict(additional.data, **{ 'url': url_when_clicked }) %}
                {% set additional.data = dict(additional.data, **{ 'clickAction': url_when_clicked }) %}
              {% endif %}

              {% if clear_notification == true %}
                {% set notification.data = dict(notification.data, **{ 'message': "clear_notification" }) %}
              {% endif %}

              {% set additional.data = dict(additional.data, **{ 'priority': "high" }) %} 
              {% set additional.data = dict(additional.data, **{ 'ttl': 0 }) %}

              # ACTIONS 
              {% if action_1_action or action_1_custom_action or action_1_title or action_1_uri %}
                {% set action = dict() %}
                {% if action_1_action or action_1_custom_action %}{% set action = dict(action, **{ 'action': (action_1_custom_action if action_1_custom_action else ('CALL' if (phoneType == 'Apple' and action_1_action == 'CALL') else ('URI' if action_1_action == 'CALL' else action_1_action)) ) }) %}{% endif %}
                {% if action_1_title %}{% set action = dict(action, **{ 'title': action_1_title }) %}{% endif %}
                {% if action_1_uri %}{% set action = dict(action, **{ 'uri': ('tel:' ~ action_1_uri|regex_replace('[^0-9]', '') if phoneType == 'Apple' and action_1_action == 'CALL' else ('deep-link://tel:' ~ action_1_uri|regex_replace('[^0-9]', '') if action_1_action == 'CALL' else action_1_uri) ) }) %}{% endif %}
                
                {% if phoneType == "Apple" %}
                  {% if action_1_icon %}{% set action = dict(action, **{ 'icon': action_1_icon }) %}{% endif %}
                  {% if action_1_destructive %}{% set action = dict(action, **{ 'destructive': action_1_destructive }) %}{% endif %}
                  {% if action_1_textinputbuttontitle %}{% set action = dict(action, **{ 'textInputButtonTitle': action_1_textinputbuttontitle }) %}{% endif %}
                  {% if action_1_textinputplaceholder %}{% set action = dict(action, **{ 'textInputPlaceholder': action_1_textinputplaceholder }) %}{% endif %}
                  {% if action_1_authenticationRequired %}{% set action = dict(action, **{ 'authenticationRequired': action_1_authenticationRequired }) %}{% endif %}
                {% endif %}  
                {% set actions = actions + [action] %}
              {% endif %}   
              
              {% if action_2_action or action_2_custom_action or action_2_title or action_2_uri %}
                {% set action = dict() %}
                {% if action_2_action or action_2_custom_action %}{% set action = dict(action, **{ 'action': (action_2_custom_action if action_2_custom_action else ('CALL' if (phoneType == 'Apple' and action_2_action == 'CALL') else ('URI' if action_2_action == 'CALL' else action_2_action)) ) }) %}{% endif %}
                {% if action_2_title %}{% set action = dict(action, **{ 'title': action_2_title }) %}{% endif %}
                {% if action_2_uri %}{% set action = dict(action, **{ 'uri': ('tel:' ~ action_2_uri|regex_replace('[^0-9]', '') if phoneType == 'Apple' and action_2_action == 'CALL' else ('deep-link://tel:' ~ action_2_uri|regex_replace('[^0-9]', '') if action_2_action == 'CALL' else action_2_uri) ) }) %}{% endif %}

                {% if phoneType == "Apple" %}
                  {% if action_2_icon %}{% set action = dict(action, **{ 'icon': action_2_icon }) %}{% endif %}          
                  {% if action_2_destructive %}{% set action = dict(action, **{ 'destructive': action_2_destructive }) %}{% endif %}
                  {% if action_2_textinputbuttontitle %}{% set action = dict(action, **{ 'textInputButtonTitle': action_2_textinputbuttontitle }) %}{% endif %}
                  {% if action_2_textinputplaceholder %}{% set action = dict(action, **{ 'textInputPlaceholder': action_2_textinputplaceholder }) %}{% endif %}
                  {% if action_2_authenticationRequired %}{% set action = dict(action, **{ 'authenticationRequired': action_2_authenticationRequired }) %}{% endif %}
                {% endif %}  
                {% set actions = actions + [action] %}
              {% endif %}   
              
              {% if action_3_action or action_3_custom_action or action_3_title or action_3_uri %}
                {% set action = dict() %}
                {% if action_3_action or action_3_custom_action %}{% set action = dict(action, **{ 'action': (action_3_custom_action if action_3_custom_action else ('CALL' if (phoneType == 'Apple' and action_3_action == 'CALL') else ('URI' if action_3_action == 'CALL' else action_3_action)) ) }) %}{% endif %}
                {% if action_3_title %}{% set action = dict(action, **{ 'title': action_3_title }) %}{% endif %}
                {% if action_3_uri %}{% set action = dict(action, **{ 'uri': ('tel:' ~ action_3_uri|regex_replace('[^0-9]', '') if phoneType == 'Apple' and action_3_action == 'CALL' else ('deep-link://tel:' ~ action_3_uri|regex_replace('[^0-9]', '') if action_3_action == 'CALL' else action_3_uri) ) }) %}{% endif %}
                
                {% if phoneType == "Apple" %}
                  {% if action_3_icon %}{% set action = dict(action, **{ 'icon': action_3_icon }) %}{% endif %}
                  {% if action_3_destructive %}{% set action = dict(action, **{ 'destructive': action_3_destructive }) %}{% endif %}
                  {% if action_3_textinputbuttontitle %}{% set action = dict(action, **{ 'textInputButtonTitle': action_3_textinputbuttontitle }) %}{% endif %}
                  {% if action_3_textinputplaceholder %}{% set action = dict(action, **{ 'textInputPlaceholder': action_3_textinputplaceholder }) %}{% endif %}
                  {% if action_3_authenticationRequired %}{% set action = dict(action, **{ 'authenticationRequired': action_3_authenticationRequired }) %}{% endif %}
                {% endif %} 
                {% set actions = actions + [action] %}
              {% endif %} 

              {% if actions %}
                {% set additional.data = dict(additional.data, **{ 'actions': actions }) %}
              {% endif %}


              {% if command %}
                {% set additional.data = dict(additional.data, **{ 'command': message }) %}
                {% set notification.data = dict(notification.data, **{ 'message': command }) %}
              {% endif %} 

              {% if additional.data %}
                {% set notification.data = dict(notification.data, **{ 'data': additional.data }) %}
              {% endif %}

              {{ notification.data }}
        - data:
            message: "{{ message }}"
            title: "{{ title }}"
            push:
              interruption-level: "{{ interruption_level }}"
              sound: "{{ sound }}"
            data:
              url: |
                {{ url_when_clicked }}
              clickAction: |
                {{ url_when_clicked }}
              image: |
                {{ image | default(null) }}
              tag: |
                {{ tag }}
              group: |
                {{ group }}
              channel: |
                {{ channel }}
              priority: high
              ttl: 0
              sticky: |
                {{ sticky }}
              persistent: |
                {{ persistent }}
              notification_icon: "{{ notification_icon }}"
              color: >-
                #{{ '%02x%02x%02x' | format(notification_color[0],notification_color[1],notification_color[2]) }}
              icon_url: "{{ image_icon }}"
              timeout: |
                {{ timeout }}
              progress: |
                {{ progress }}
              progress_max: |
                {{ progress_max }}
              progress_indeterminate: |
                {{ progress_indeterminate }}
              chronometer: |
                {{ 'true' if chronometer else 'false' }}
              when: |
                {{ chronometer }}
              when_relative: |
                {{ chronometer_relative }}
              actions:
                - action: "{{ action_1_action }}{{ action_1_custom_action}}"
                  title: "{{ action_1_title }}"
                  uri: "{{ action_1_uri }}"
                - action: "{{ action_2_action }}{{ action_2_custom_action}}"
                  title: "{{ action_2_title }}"
                  uri: "{{ action_2_uri }}"
                - action: "{{ action_3_action }}{{ action_3_custom_action}}"
                  title: "{{ action_3_title }}"
                  uri: "{{ action_3_uri }}"
          action: |
            notify.mobile_app_{{ device_attr(repeat.item, "name") | slugify}}
          enabled: false
          alias: Raw Example Notification (Using Variables)
        - alias: Phone vs Watch Notifications
          if:
            - alias: If NOT a watch
              condition: template
              value_template: >-
                {% set comment = "Notifications to WearOS don't seem to work properly if too many/the wrong parameters are sent" %}

                {% set comment = "This is what works for my TicWatch5 to separate it from a standard mobile notification" %}


                {% set MobileDeviceModel = device_attr(repeat.item, 'model') | lower %}

                {% if "watch" in MobileDeviceModel %}

                false

                {% else %}

                true 

                {% endif %}
          then:
            - data: "{{ mobile_notification_data }}"
              action: >
                notify.mobile_app_{{ device_attr(repeat.item, "name") | slugify}}
              alias: Phone Notification
          else:
            - data: "{{ watch_notification_data }}"
              action: >
                notify.mobile_app_{{ device_attr(repeat.item, "name") | slugify}}
              alias: Wear OS Notification
      for_each: "{{ phone_device_id }}"
alias: Dynamic Notify Mobile Device
fields:
  phone_device_id:
    selector:
      device:
        integration: mobile_app
        multiple: true
    name: üì≤ Phone Device ID
    description: Mobile phone to notify
    required: true
    default: []
  notification_icon:
    selector:
      icon: {}
    name: üßø Notification Icon
    description: ü§ñ Notification Status Bar Icon
    default: mdi:home-assistant
    required: false
  notification_color:
    selector:
      color_rgb: {}
    name: üé® Notification Color
    description: ü§ñ Icon Color
    default:
      - 24
      - 188
      - 242
    required: false
  title:
    selector:
      text: null
    name: üè∑Ô∏è Title
    description: Notification Title ("Home Assistant" results in no title).
  message:
    selector:
      text:
        multiline: true
    name: üí¨ Message
    required: true
    description: Notification Message
    default: Message
  enable_tts:
    selector:
      boolean: {}
    name: üîä Enable TTS?
    description: >-
      ü§ñ If enabled, the Message will be played audibly using TTS (No visible notification will be sent to device)  [Will override "CLEAR NOTIFICATION"].
  media_stream:
    selector:
      select:
        options:
          - label: Music Volume (Default Volume üîâ)
            value: Default
          - label: Alarm Volume (Alarm Volume ‚è∞üîâ)
            value: alarm_stream
          - label: 100% Volume (MAX VOLUME üíØüîäüì¢)
            value: alarm_stream_max
    name: üéöÔ∏è Media Stream (TTS Volume)
    description: >-
      ü§ñ Default = Music Volume  ------  Alarm_Stream = Alarm Volumee  ------ 
      Max = 100% volume
    default: Default
  url_when_clicked:
    selector:
      text: null
    name: üîó URL when Clicked
    description: >-
      For dashboards, use "/lovelace-mobile/cameras" for "http://homeassistant.loca:8123/lovelace-mobile/cameras"
    default: /lovelace-mobile/0
  image_icon:
    selector:
      text: null
    name: üñºÔ∏è Image Icon
    description: >-
      Kind of like an Image, but shown when notification is folded. Use external URL or local relative path (i.e. /local/icon/icon.png).
    default: >-
      https://community-assets.home-assistant.io/optimized/3X/6/a/6a99ebb8d0b585a00b407123ff76964cb3e18780_2_500x500.png
  image:
    selector:
      text: null
    name: üñºÔ∏è Image
    description: >-
      Must be a static img, GIFs do not work. External URL or local relative
      path (i.e. /local/icon/icon.png).
  tag:
    selector:
      text: null
    name: üÜî Tag
    description: >-
      Unique Notification ID. Use to update a notification instead of sending
      multiple. Can also be used in case you want to dismiss the notification
      later with 'clear_notification'.
  channel:
    selector:
      select:
        options:
          - label: Default
            value: Default
          - label: üì∑ Security
            value: Security
          - label: üö∂‚Äç‚ôÇÔ∏è  Motion
            value: Motion
          - label: üß∫ Laundry
            value: Laundry
          - label: üå§  Weather
            value: Weather
          - label: üîî Reminder
            value: Reminder
          - label: üö® alarm_stream üö® (FULL VOLUME ALERT)
            value: alarm_stream
          - label: üß™ Test
            value: Test
    name: üóÇÔ∏è Channel
    description: >-
      ü§ñ "Categories". Easily allows settings different notification sounds,
      etc, based on notification type (Alarm vs Security vs Appliance
      notification) on Android [You can add more, these are just my defaults]
    required: false
  group:
    selector:
      text: null
    name: üóÉÔ∏è Group
    description: >-
      Combine notifications together visually if there's many.  --- ü§ñ Do not
      use the same tag in a different group to avoid unexpected behavior.
  clear_notification:
    selector:
      boolean: {}
    name: ‚ùå Clear Notification
    description: Dismiss the notification with the specified "Tag".
  sticky:
    selector:
      boolean: {}
    name: üìå Sticky
    description: >-
      ü§ñ Sticky Notifications. Selecting it will not dismiss it. It must be
      swipped to be dismissed. 
  persistent:
    selector:
      boolean: {}
    name: üß± Persistent
    description: >-
      ü§ñ Persistent Notification. CANNOT be swiped away. Must use tag. Use
      Dismiss + tag to clear.  (Can be dismissed by clicking. Use 'Sticky' to
      avoid this)
  android_auto_ui:
    selector:
      boolean: {}
    name: üöò Android Auto UI
    description: ü§ñ Whether or not the notification should show up in Android Auto
    required: true
    default: true
  command:
    selector:
      text: null
    name: üßæ Command
    description: >-
      For issuing commands, like opening Home Assistant to a specific page.
      Define the 'command' here, and any supporting data in "Message".  (IE. To
      open HA to a specific dashboard. Command="command_webview" and
      Message="lovelace-mobile/garage")
  subtitle_subject:
    selector:
      text: null
    name: üì∞ Subtitle/Subject
    description: >-
      ü§ñ Might replace text --- üçéShows in addition to Title and Message |
      [Docs](https://companion.home-assistant.io/docs/notifications/notifications-basic#subtitle--subject)
  timeout:
    selector:
      number:
        min: 1
        max: 100000
        step: 1
    name: ‚è±Ô∏è Timeout
    description: ü§ñ How long before the notification is automatically dismissed
  progress_bar_value:
    selector:
      number:
        min: 1
        max: 100
        step: 1
    name: üìä Progress Bar Value
    description: ü§ñ ‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚Äì represents the current progress toward üíØ Progress Max
  progress_max:
    selector:
      number:
        min: 10
        max: 100
        step: 1
    name: üíØ Progress Max
    description: ü§ñ ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì - Progress bar's 100% value (Defaults to 100 if not defined).
  progress_indeterminate:
    selector:
      boolean: {}
    name: üîÑ Progress_indeterminate
    description: >-
      ü§ñ Creates an animated "Loading"/"In Progress" progress bar (Overrides
      "Progress" bar, but "Progress" and "Progress Max" must still be set)
  chronometer:
    selector:
      number:
        min: 1
        max: 10000000
    name: ‚è≥ Chronometer
    description: >-
      ü§ñ Real time count down. Value is in Seconds by default (unless
      Chronometer Relative is set to False).
  chronometer_variable:
    selector:
      text: null
    name: üßÆ Chronometer (Template Values)
    description: >-
      ü§ñ If you want to use a template variable instead of a raw number (ie {{
      template_sensor}} ). This will replace the "‚è≥ Chronometer" option.
  chronometer_relative:
    selector:
      boolean: {}
    name: üï∞ Chronometer Relative
    description: ü§ñ If true, value is in seconds. If false, value is in epoch time.
    default: false
  interruption_level:
    selector:
      select:
        options:
          - label: >-
              Passive - Quiet notifications without waking screen (Does not
              override Focus)
            value: passive
          - label: Active - Default behavior (Does not override Focus)
            value: active
          - label: Time-Sensitive - Important notifications (Overrides Focus)
            value: time-sensitive
          - label: Critical - Critical notifications (Overrides mute)
            value: critical
    name: üö® interruption-level
    description: üçé Set Interruption Level
  sound:
    selector:
      text: null
    name: üîî Sound
    description: >-
      üçé Set Notification sound (Use 'none' to disable notificationsound). 
      Refer to
      [Documentation](https://companion.home-assistant.io/docs/notifications/notification-sounds)
      for more info.
  notification_actions:
    selector:
      text:
        multiline: true
    name: üéØ Notification Actions
    default: >
      # THESE ARE JUST EXAMPLES. Editing this will have ZERO effect on your
      notifications. 

      ACTION 1:
       - action: URI                                      # URI can open Web Pages, Internal Home Assistant pages, or Mobile applications
          title: üì∏ Cameras                         # Simple title for the button. Can include emojis.
          uri: /lovelace-mobile/cameras   # URI Action command. This example will open a Home Assistant dashboard within the HA App. 
      ACTION 2:
        - action: URI
          title: üîä Ring
          uri: app://com.ringapp                # This URI action will open the RING App on android. 
      ACTION 3:
        - action: URI
          title: üì∏ Cameras
          uri: /lovelace-mobile/cameras

      ADDITIONAL EXAMPLES:
          - action: URI
            title: üîÑ Backups
            uri: /hassio/backups
          - action: URI
            title: üè† Blog
            uri: https://www.home-assistant.io/latest-release-notes/
          - action: URI
            title: ‚ÑπÔ∏è HA Info
            uri: /config/info
    description: >-
      Define clickable actions. You can define up to 3 for Android. This section
      is just an example of 3 defined actions. 
  1_action_1_action:
    selector:
      select:
        options:
          - label: >-
              URI     - Open app, HA dash, entity, system settings, etc (ie.
              uri: 'app://com.twitter.android')
            value: URI
          - label: OPEN üçé    - Open a URL in a browser
            value: OPEN
          - label: REPLY   - (Allow user to send text as a reply)
            value: REPLY
          - label: CALL     - Dial a phone number
            value: CALLAndroid
          - label: Alarm   - (¬Ø\_(„ÉÑ)_/¬Ø idk what it does)
            value: ALARM
          - label: Silence - (¬Ø\_(„ÉÑ)_/¬Ø idk what it does)
            value: SILENCE
    name: 1Ô∏è‚É£üõ†Ô∏è  Action 1 action
  1_action_1_custom_action:
    selector:
      text: null
    name: "1Ô∏è‚É£‚öôÔ∏è Action 1: Custom Action"
    description: >-
      Unique Action names for building more robust Notification Action
      Automations. Docs:
      https://companion.home-assistant.io/docs/notifications/actionable-notifications#building-notification-action-scripts
  1_action_1_title:
    selector:
      text: null
    name: 1Ô∏è‚É£üìù Action 1 Title
  1_action_1_uri:
    selector:
      text: null
    name: 1Ô∏è‚É£üîó Action 1 URI
  action_1_authenticationrequired:
    selector:
      text: null
    name: 1Ô∏è‚É£üîí Action 1 Authentication Required
    description: üçé 'true' to require entering a passcode to use the action.
  1_action_1_icon:
    selector:
      text: null
    name: 1Ô∏è‚É£üßø Action 1 Icon
    description: üçé The icon to use for the notification.
  1_action_1_destructive:
    selector:
      boolean: {}
    name: 1Ô∏è‚É£üü• Action 1 Destructive
    description: "üçé Highlight action button Red to represent a \"destructive\" action. "
  action_1_textinputbuttontitle:
    selector:
      text: null
    name: 1Ô∏è‚É£üó®Ô∏è Action 1 Text Input Button Title
    description: üçé Title to use for text input for actions that prompt.
  action_1_textinputplaceholder:
    selector:
      text: null
    name: 1Ô∏è‚É£üí≠ Action 1 Text Input Placeholder
    description: üçé Placeholder to use for text input for actions that prompt.
  action_2_action:
    selector:
      select:
        options:
          - URI
          - ALARM
          - REPLY
          - SILENCE
          - CALL
          - OPEN
    name: 2Ô∏è‚É£üõ†Ô∏èAction 2 action
  action_2_custom_action:
    selector:
      text: null
    name: "2Ô∏è‚É£‚öôÔ∏è Action 2: Custom Action"
    description: >-
      Unique Action names for building more robust Notification Action
      Automations. Docs:
      https://companion.home-assistant.io/docs/notifications/actionable-notifications#building-notification-action-scripts
  action_2_title:
    selector:
      text: null
    name: 2Ô∏è‚É£üìù Action 2 Title
  action_2_uri:
    selector:
      text: null
    name: 2Ô∏è‚É£üîó Action 2 URI
  action_2_authenticationrequired:
    selector:
      text: null
    name: 2Ô∏è‚É£üîí Action 2 Authentication Required
    description: üçé 'true' to require entering a passcode to use the action.
  action_2_icon:
    selector:
      text: null
    name: 2Ô∏è‚É£üßø Action 2 Icon
    description: üçé The icon to use for the notification.
  action_2_destructive:
    selector:
      boolean: {}
    name: 2Ô∏è‚É£üü• Action 2 Destructive
    description: "üçé Highlight action button Red to represent a \"destructive\" action. "
  action_2_textinputbuttontitle:
    selector:
      text: null
    name: 2Ô∏è‚É£üó®Ô∏è Action 2 Text Input Button Title
    description: üçé Title to use for text input for actions that prompt.
  action_2_textinputplaceholder:
    selector:
      text: null
    name: 2Ô∏è‚É£üí≠ Action 2 Text Input Placeholder
    description: üçé Placeholder to use for text input for actions that prompt.
  action_3_action:
    selector:
      select:
        options:
          - URI
          - ALARM
          - REPLY
          - SILENCE
          - CALL
          - OPEN
    name: 3Ô∏è‚É£üõ†Ô∏è Action 3 action
  action_3_custom_action:
    selector:
      text: null
    name: "3Ô∏è‚É£‚öôÔ∏è Action 3: Custom Action"
    description: >-
      Unique Action names for building more robust Notification Action
      Automations. Docs:
      https://companion.home-assistant.io/docs/notifications/actionable-notifications#building-notification-action-scripts
  action_3_title:
    selector:
      text: null
    name: 3Ô∏è‚É£üìù Action 3 Title
  action_3_uri:
    selector:
      text: null
    name: 3Ô∏è‚É£üîó Action 3 URI
  action_3_authenticationrequired:
    selector:
      text: null
    name: 3Ô∏è‚É£üîí Action 3 Authentication Required
    description: üçé 'true' to require entering a passcode to use the action.
  action_3_icon:
    selector:
      text: null
    name: 3Ô∏è‚É£üßø Action 3 Icon
    description: üçé The icon to use for the notification.
  action_3_destructive:
    selector:
      boolean: {}
    name: 3Ô∏è‚É£üü• Action 3 Destructive
    description: "üçé Highlight action button Red to represent a \"destructive\" action. "
  action_3_textinputbuttontitle:
    selector:
      text: null
    name: 3Ô∏è‚É£üó®Ô∏è Action 3 Text Input Button Title
    description: üçé Title to use for text input for actions that prompt.
  action_3_textinputplaceholder:
    selector:
      text: null
    name: 3Ô∏è‚É£üí≠ Action 3 Text Input Placeholder
    description: üçé Placeholder to use for text input for actions that prompt.
description: >-
  Notify a specific mobile device. Or Multiple!

  Has fields for nearly everything so you don't have to remember all that
  nonsense.  

  [Notification
  Documentation](https://companion.home-assistant.io/docs/notifications/actionable-notifications)


  ü§ñ = Android Only

  üçé = Apple iOS Only
icon: mdi:cellphone-message
